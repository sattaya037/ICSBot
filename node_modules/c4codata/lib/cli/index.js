#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
require("isomorphic-fetch");
var cli_1 = require("cli");
var process_1 = require("process");
var lodash_1 = require("lodash");
var util_1 = require("../util");
var fs_1 = require("fs");
var path_1 = require("path");
var generator_1 = require("../generator");
var mkdirp = require("mkdirp");
var options = cli_1.parse({
    uri: ['m', 'metadata uri', "string"],
    user: ['u', 'c4c username', "string"],
    pass: ['p', 'c4c password', "string"],
    out: ['o', 'out file', 'string', "c4codata.js"],
    debug: ['d', 'debug mode', 'boolean', false],
    separate: ['s', 'out with separate files in directory', "string"],
    odatajs: ['r', 'seperate generator without odata.js', 'boolean', false]
}, []);
var generateAndWriteSeprate = function (meta, options) {
    var basePath = path_1.join(process_1.cwd(), options.separate);
    var odataInitPath = path_1.join(basePath, "odata.js");
    var indexPath = path_1.join(basePath, "index.js");
    var classes = generator_1.parseMetaClassFromOnlyClassDefault(meta);
    if (!options.odatajs) {
        fs_1.writeFileSync(odataInitPath, generator_1.generateSeprateODataFile(options.uri, options.user, options.pass));
    }
    fs_1.writeFileSync(indexPath, generator_1.generateSeprateIndexFile(classes));
    lodash_1.map(classes, function (c) {
        var classFuncs = generator_1.parseMetaCRUDFunctionByEntityName(meta, c.name);
        var classFuncsStr = generator_1.generateFunctionsString(classFuncs);
        var classType = generator_1.parseSingleMetaClassFromOnlyType(c.originEntity);
        var classTypeStr = generator_1.generateClassString(classType);
        var classString = generator_1.generateSeprateClassString(c, classFuncsStr, classTypeStr);
        fs_1.writeFileSync(path_1.join(basePath, c.name + ".js"), classString);
    });
};
var generateAndWriteSingle = function (meta, options) {
    var outPath = path_1.join(process_1.cwd(), options.out);
    var singleFileString = generator_1.generateAllDefault(meta, options);
    fs_1.writeFileSync(outPath, singleFileString);
};
var d = function (string) {
    if (options.debug) {
        console.log(string);
    }
};
(function () { return __awaiter(_this, void 0, void 0, function () {
    var meta, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!options.uri) return [3 /*break*/, 4];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                d("fetch metadata: " + options.uri);
                return [4 /*yield*/, generator_1.parseODataMetadataFromRemote(options.uri, util_1.GetAuthorizationPair(options.user, options.pass), fetch)];
            case 2:
                meta = _a.sent();
                if (options.separate) {
                    // save type defination to different files
                    mkdirp.sync(path_1.join(process_1.cwd(), options.separate));
                    generateAndWriteSeprate(meta, options);
                }
                else {
                    // save all type defination in single js type
                    generateAndWriteSingle(meta, options);
                }
                return [3 /*break*/, 4];
            case 3:
                error_1 = _a.sent();
                console.error(error_1.message);
                d(error_1);
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); })();
