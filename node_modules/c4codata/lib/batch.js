"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var http_string_parser_1 = require("http-string-parser");
var uuid_1 = require("uuid");
exports.formatHttpRequestString = function (u, r) {
    return lodash_1.join([
        (r.method || "GET") + " " + u + " HTTP/1.1",
        "" + lodash_1.join(lodash_1.map(r.headers, function (v, k) { return k + ": " + v; }), "\n"),
        "" + (r.body ? "\n" + r.body : ""),
    ], "\n");
};
/**
 * format batch request string body
 *
 * @param requests
 * @param boundary a gived boundary id
 */
exports.formatBatchRequest = function (requests, boundary) {
    return lodash_1.join(lodash_1.concat(lodash_1.map(requests, function (r) {
        if (r.init.method === "GET" || !r.init.method) {
            return lodash_1.join([
                "--" + boundary,
                "Content-Type: application/http",
                "Content-Transfer-Encoding: binary",
                "",
                exports.formatHttpRequestString(r.url, r.init),
                "",
            ], "\n");
        }
        else {
            var generated_uuid = uuid_1.v4();
            return lodash_1.join([
                "--" + boundary,
                "Content-Type: multipart/mixed; boundary=" + generated_uuid,
                "",
                "--" + generated_uuid,
                "Content-Type: application/http",
                "Content-Transfer-Encoding: binary",
                "",
                exports.formatHttpRequestString(r.url, r.init),
                "",
                "--" + generated_uuid + "--",
            ], "\n");
        }
    }), "--" + boundary + "--"), "\n");
};
/**
 * parse stringify response in multipart
 */
exports.parseResponse2 = function (httpResponseString) { return __awaiter(_this, void 0, void 0, function () {
    var response, rt;
    var _this = this;
    return __generator(this, function (_a) {
        response = http_string_parser_1.parseResponse(httpResponseString);
        rt = {
            json: function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, JSON.parse(response.body)];
                });
            }); },
            text: function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, response.body];
                });
            }); },
            headers: response.headers,
            status: parseInt(response.statusCode, 10),
            statusText: response.statusMessage,
        };
        return [2 /*return*/, rt];
    });
}); };
exports.parseMultiPartContent = function (multipartBodyString, boundaryString) { return __awaiter(_this, void 0, void 0, function () {
    var parts, meaningfulParts, _a;
    var _this = this;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!(multipartBodyString && boundaryString)) return [3 /*break*/, 2];
                parts = lodash_1.split(multipartBodyString, "--" + boundaryString);
                meaningfulParts = lodash_1.slice(parts, 1, parts.length - 1);
                _a = lodash_1.flatten;
                return [4 /*yield*/, Promise.all(lodash_1.map(meaningfulParts, function (p) { return __awaiter(_this, void 0, void 0, function () {
                        var response, contentType, innerBoundaryString, _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0: return [4 /*yield*/, exports.parseResponse2(p)];
                                case 1:
                                    response = _c.sent();
                                    contentType = response.headers["Content-Type"];
                                    if (!lodash_1.startsWith(contentType, "multipart/mixed")) return [3 /*break*/, 3];
                                    innerBoundaryString = lodash_1.split(contentType, "=").pop();
                                    _a = exports.parseMultiPartContent;
                                    return [4 /*yield*/, response.text()];
                                case 2: return [2 /*return*/, _a.apply(void 0, [_c.sent(), innerBoundaryString])];
                                case 3:
                                    if (!(contentType === "application/http")) return [3 /*break*/, 5];
                                    _b = exports.parseResponse2;
                                    return [4 /*yield*/, response.text()];
                                case 4: return [2 /*return*/, _b.apply(void 0, [_c.sent()])];
                                case 5: return [2 /*return*/];
                            }
                        });
                    }); }))];
            case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
            case 2: throw new Error("parameter lost");
        }
    });
}); };
