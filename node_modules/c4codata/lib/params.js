"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var filter_1 = require("./filter");
var lodash_1 = require("lodash");
var url_search_params_1 = __importDefault(require("@ungap/url-search-params"));
/**
 * OData Param Object
 *
 * ref https://github.com/SAP/C4CODATAAPIDEVGUIDE
 */
var ODataQueryParam = /** @class */ (function () {
    function ODataQueryParam() {
        this.$skip = 0;
        this.$top = 0;
        this.$select = [];
        this.$format = "json";
        this.$expand = [];
    }
    ODataQueryParam.newParam = function () {
        return new ODataQueryParam();
    };
    /**
     * with $inlinecount value
     */
    ODataQueryParam.prototype.inlinecount = function (inlinecount) {
        if (inlinecount === void 0) { inlinecount = false; }
        if (inlinecount) {
            this.$inlinecount = "allpages";
        }
        else {
            delete this.$inlinecount;
        }
        return this;
    };
    /**
     * filter
     * @param filter
     */
    ODataQueryParam.prototype.filter = function (filter) {
        if (filter instanceof filter_1.ODataFilter) {
            this.$filter = filter.build();
            return this;
        }
        else if (typeof filter === "string") {
            this.$filter = filter;
            return this;
        }
        else {
            throw Error("ODataQueryParam.filter only accept string or ODataFilter type parameter");
        }
    };
    /**
     * skip first records
     *
     * @param skip
     */
    ODataQueryParam.prototype.skip = function (skip) {
        this.$skip = skip;
        return this;
    };
    /**
     * limit result max records
     *
     * @param top
     */
    ODataQueryParam.prototype.top = function (top) {
        this.$top = top;
        return this;
    };
    /**
     * select viewed fields
     *
     * @param selects
     */
    ODataQueryParam.prototype.select = function (selects) {
        this.$select = lodash_1.concat(this.$select, selects);
        return this;
    };
    /**
     * set order sequence
     *
     * @param fieldOrOrders
     * @param order default desc, disabled when first params is array
     */
    ODataQueryParam.prototype.orderby = function (fieldOrOrders, order) {
        if (order === void 0) { order = "desc"; }
        if (lodash_1.isArray(fieldOrOrders)) {
            return this.orderbyMulti(fieldOrOrders);
        }
        else {
            this.$orderby = fieldOrOrders + " " + order;
            return this;
        }
    };
    /**
     * set order by multi field
     *
     * @param fields
     */
    ODataQueryParam.prototype.orderbyMulti = function (fields) {
        this.$orderby = lodash_1.join(lodash_1.map(fields, function (f) { return f.field + " " + (f.order || "desc"); }), ",");
        return this;
    };
    /**
     * result format, please keep it as json
     *
     * @param format deafult json
     */
    ODataQueryParam.prototype.format = function (format) {
        if (format === "json") {
            this.$format = format;
        }
        else {
            throw new Error("c4codata dont support xml response");
        }
        return this;
    };
    /**
     * full text search
     *
     * default with fuzzy search
     *
     * @param value
     */
    ODataQueryParam.prototype.search = function (value, fuzzy) {
        if (fuzzy === void 0) { fuzzy = true; }
        this.$search = fuzzy ? "%" + value + "%" : value;
        return this;
    };
    /**
     * expand navigation props
     *
     * @param fields
     * @param replace
     */
    ODataQueryParam.prototype.expand = function (fields, replace) {
        if (replace === void 0) { replace = false; }
        if (replace) {
            if (lodash_1.isString(fields)) {
                this.$expand = [fields];
            }
            if (lodash_1.isArray(fields)) {
                this.$expand = fields;
            }
        }
        else {
            this.$expand = lodash_1.concat(this.$expand, fields);
        }
        return this;
    };
    ODataQueryParam.prototype.toString = function () {
        var rt = new url_search_params_1.default();
        if (this.$format) {
            rt.append("$format", this.$format);
        }
        if (this.$filter) {
            rt.append("$filter", this.$filter.toString());
        }
        if (this.$orderby) {
            rt.append("$orderby", this.$orderby);
        }
        if (this.$search) {
            rt.append("$search", this.$search);
        }
        if (this.$select && this.$select.length > 0) {
            rt.append("$select", lodash_1.join(this.$select, ","));
        }
        if (this.$skip) {
            rt.append("$skip", this.$skip);
        }
        if (this.$top && this.$top > 0) {
            rt.append("$top", this.$top);
        }
        if (this.$expand && this.$expand.length > 0) {
            rt.append("$expand", this.$expand.join(","));
        }
        if (this.$inlinecount) {
            rt.append("$inlinecount", this.$inlinecount);
        }
        return rt.toString();
    };
    return ODataQueryParam;
}());
exports.ODataQueryParam = ODataQueryParam;
exports.ODataParam = ODataQueryParam;
