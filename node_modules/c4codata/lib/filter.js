"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var ExprOperator;
(function (ExprOperator) {
    ExprOperator["eq"] = "eq";
    ExprOperator["ne"] = "ne";
    ExprOperator["gt"] = "gt";
    ExprOperator["lt"] = "lt";
    ExprOperator["ge"] = "ge";
    ExprOperator["le"] = "le";
})(ExprOperator = exports.ExprOperator || (exports.ExprOperator = {}));
var ODataFieldExpr = /** @class */ (function () {
    function ODataFieldExpr(filter, fieldName) {
        this._exprMappings = filter.getExprMapping();
        this._fieldName = fieldName;
        this._filter = filter;
        if (lodash_1.isEmpty(this._getFieldExprs())) {
            this._exprMappings[this._fieldName] = [];
        }
    }
    ODataFieldExpr.prototype._getFieldExprs = function () {
        return this._exprMappings[this._fieldName];
    };
    ODataFieldExpr.prototype._addExpr = function (op, value) {
        switch (typeof value) {
            case "number":
                this._getFieldExprs().push({ op: op, value: "" + value });
                break;
            case "string":
                if (value.startsWith("'") || value.startsWith("datetime")) {
                    this._getFieldExprs().push({ op: op, value: value });
                }
                else {
                    this._getFieldExprs().push({ op: op, value: "'" + value + "'" });
                }
                break;
            case "object":
                if (value instanceof Date) {
                    this._getFieldExprs().push({ op: op, value: "datetimeoffset'" + value.toISOString() + "'" });
                    break;
                }
                else {
                    throw new Error("Not support object " + value + " in odata filter eq/ne/gt/ge/ne/nt ...");
                }
            case "undefined":
                throw new Error("You must set value in odata filter eq/ne/gt/ge/ne/nt ...");
            default:
                throw new Error("Not support typeof " + typeof value + ": " + value + " in odata filter eq/ne/gt/ge/ne/nt ...");
        }
    };
    /**
     * equal
     * @param value
     */
    ODataFieldExpr.prototype.eq = function (value) {
        this._addExpr(ExprOperator.eq, value);
        return this._filter;
    };
    /**
     * not equal
     * @param value
     */
    ODataFieldExpr.prototype.ne = function (value) {
        this._addExpr(ExprOperator.ne, value);
    };
    ODataFieldExpr.prototype.eqString = function (value) {
        this._addExpr(ExprOperator.eq, "'" + value + "'");
        return this._filter;
    };
    ODataFieldExpr.prototype.neString = function (value) {
        this._addExpr(ExprOperator.ne, "'" + value + "'");
        return this._filter;
    };
    /**
     * greater or equal
     * @param value
     */
    ODataFieldExpr.prototype.ge = function (value) {
        this._addExpr(ExprOperator.ge, value);
        return this._filter;
    };
    /**
     * greater than
     * @param value
     */
    ODataFieldExpr.prototype.gt = function (value) {
        this._addExpr(ExprOperator.gt, value);
        return this._filter;
    };
    /**
     * less or equal
     * @param value
     */
    ODataFieldExpr.prototype.le = function (value) {
        this._addExpr(ExprOperator.le, value);
        return this._filter;
    };
    /**
     * less than
     * @param value
     */
    ODataFieldExpr.prototype.lt = function (value) {
        this._addExpr(ExprOperator.lt, value);
        return this._filter;
    };
    /**
     * match any value in an array
     *
     * @param values
     */
    ODataFieldExpr.prototype.in = function (values) {
        var _this = this;
        if (!lodash_1.isEmpty(values)) {
            lodash_1.forEach(values, function (value) {
                _this.eqString(value);
            });
        }
        return this._filter;
    };
    /**
     * filter by value range
     *
     * @param lower
     * @param max
     * @param includeBoundary
     */
    ODataFieldExpr.prototype.between = function (lower, max, includeBoundary) {
        if (includeBoundary === void 0) { includeBoundary = true; }
        if (lodash_1.isEmpty(lower) && lodash_1.isEmpty(max)) {
            throw new Error("You must give out the start and end value");
        }
        if (includeBoundary) {
            this.ge(lower);
            this.le(max);
        }
        else {
            this.gt(lower);
            this.lt(max);
        }
        return this._filter;
    };
    ODataFieldExpr.prototype.betweenDateTime = function (start, end, includeBoundary) {
        if (includeBoundary === void 0) { includeBoundary = true; }
        if (start && end) {
            return this.between("datetime'" + start.toISOString() + "'", "datetime'" + end.toISOString() + "'", includeBoundary);
        }
        else {
            throw new Error("You must give out the start and end date");
        }
    };
    ODataFieldExpr.prototype.betweenDateTimeOffset = function (start, end, includeBoundary) {
        if (includeBoundary === void 0) { includeBoundary = true; }
        if (start && end) {
            return this.between("datetimeoffset'" + start.toISOString() + "'", "datetimeoffset'" + end.toISOString() + "'", includeBoundary);
        }
        else {
            throw new Error("You must give out the start and end date");
        }
    };
    return ODataFieldExpr;
}());
exports.ODataFieldExpr = ODataFieldExpr;
/**
 * OData filter builder
 */
var ODataFilter = /** @class */ (function () {
    function ODataFilter() {
        this._fieldExprMappings = {};
    }
    ODataFilter.newBuilder = function () {
        return new ODataFilter();
    };
    /**
     * construct a new filter
     */
    ODataFilter.newFilter = function () {
        return new ODataFilter();
    };
    /**
     * getExprMapping
     */
    ODataFilter.prototype.getExprMapping = function () {
        return this._fieldExprMappings;
    };
    /**
     * @param name filed name
     */
    ODataFilter.prototype.field = function (name) {
        return new ODataFieldExpr(this, name);
    };
    /**
     * The value of a field matches any value in the list.
     *
     * @deprecated please use filter.field().in()
     * @param name
     * @param values
     */
    ODataFilter.prototype.fieldIn = function (name, values) {
        return this.fieldValueMatchArray(name, values);
    };
    /**
     * The value of a field matches any value in the list.
     *
     * @deprecated please use filter.field().in()
     * @param name
     * @param values
     */
    ODataFilter.prototype.fieldValueMatchArray = function (name, values) {
        var _this = this;
        if (values) {
            lodash_1.forEach(values, function (value) {
                _this.field(name).eqString(value);
            });
        }
        return this;
    };
    /**
     * DEPRECATED
     *
     * please use betweenDateTime/betweenDateTimeOffset
     *
     * @deprecated
     * @param name
     * @param start
     * @param end
     */
    ODataFilter.prototype.inPeriod = function (name, start, end) {
        return this.betweenDateTime(name, start, end);
    };
    /**
     * @deprecated
     * @param name
     * @param start
     * @param end
     */
    ODataFilter.prototype.betweenDateTime = function (name, start, end) {
        if (start && end) {
            return this.gtDateTime(name, start).ltDateTime(name, end);
        }
        else {
            throw new Error("You must give out the start and end date");
        }
    };
    /**
     * @deprecated
     * @param name
     * @param start
     * @param end
     */
    ODataFilter.prototype.betweenDateTimeOffset = function (name, start, end) {
        if (start && end) {
            return this.gtDateTimeOffset(name, start).ltDateTimeOffset(name, end);
        }
        else {
            throw new Error("You must give out the start and end date");
        }
    };
    ODataFilter.prototype.gtDateTime = function (name, date) {
        return this.field(name).gt("datetime'" + date.toISOString() + "'");
    };
    ODataFilter.prototype.gtDateTimeOffset = function (name, date) {
        return this.field(name).gt("datetimeoffset'" + date.toISOString() + "'");
    };
    ODataFilter.prototype.ltDateTime = function (name, date) {
        return this.field(name).lt("datetime'" + date.toISOString() + "'");
    };
    ODataFilter.prototype.ltDateTimeOffset = function (name, date) {
        return this.field(name).lt("datetimeoffset'" + date.toISOString() + "'");
    };
    /**
     * AND expr
     *
     * filter.field("A").eq("'a'").and().field("B").eq("'b").build() == "A eq 'a' and B eq 'b'"
     *
     * filter.field("A").eq("'a'").and("B eq 'b'").build() == "A eq 'a' and (B eq 'b')"
     *
     * @deprecated c4codata will auto detect connect operator between difference fields
     * @param filter
     */
    ODataFilter.prototype.and = function (filter) {
        return this;
    };
    /**
     * @deprecated c4codata will auto detect connect operator in same fields
     * @param filter
     */
    ODataFilter.prototype.or = function (filter) {
        return this;
    };
    /**
     * @deprecated c4codata will auto group exprs
     * @param filter
     */
    ODataFilter.prototype.group = function (filter) {
        this._fieldExprMappings = lodash_1.merge(this._fieldExprMappings, filter.getExprMapping());
        return this;
    };
    ODataFilter.prototype.toString = function () {
        return this.build();
    };
    ODataFilter.prototype._buildFieldExprString = function (field) {
        var exprs = this.getExprMapping()[field];
        if (!lodash_1.isEmpty(exprs)) {
            if (lodash_1.isEmpty(lodash_1.filter(exprs, { op: ExprOperator.eq }))) {
                return "(" + lodash_1.join(lodash_1.map(exprs, function (_a) {
                    var op = _a.op, value = _a.value;
                    return field + " " + op + " " + value;
                }), " and ") + ")";
            }
            else {
                return "(" + lodash_1.join(lodash_1.map(exprs, function (_a) {
                    var op = _a.op, value = _a.value;
                    return field + " " + op + " " + value;
                }), " or ") + ")";
            }
        }
        else {
            return "";
        }
    };
    ODataFilter.prototype.build = function () {
        var _this = this;
        var _rt = "";
        _rt = lodash_1.join(
        // join all fields exprs string
        lodash_1.map(this.getExprMapping(), function (exprs, fieldName) {
            switch (exprs.length) {
                // if one field expr mapping array is empty
                case 0:
                    return "";
                // only have one expr
                case 1:
                    var _a = exprs[0], op = _a.op, value = _a.value;
                    return fieldName + " " + op + " " + value;
                default:
                    // multi exprs
                    return _this._buildFieldExprString(fieldName);
            }
        }), " and ");
        return _rt;
    };
    return ODataFilter;
}());
exports.ODataFilter = ODataFilter;
