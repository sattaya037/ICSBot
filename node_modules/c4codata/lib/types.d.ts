export declare type HTTPMethod = "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "PATCH";
export interface PlainODataResponse {
    d?: {
        __count?: string; /** $inlinecount values */
        results: any | Array<any>; /** result list/object */
        [key: string]: any;
    };
    error?: {
        code: string;
        message: {
            lang: string;
            value: string; /** server error message */
        };
    };
}
export interface Credential {
    username: string;
    password: string;
}
export declare class C4CODataSingleResult<T> {
    d: {
        results: T;
    };
    static fromPlainObject: <E>(object: PlainODataResponse, type: new () => E) => C4CODataSingleResult<E>;
    static fromRequestResult: <T_1>(p: Promise<PlainODataResponse>, t: new () => T_1) => Promise<C4CODataSingleResult<T_1>>;
}
export declare class C4CODataResult<T> {
    d: {
        __count?: string;
        results: T[];
    };
    static fromPlainObject: <E>(object: PlainODataResponse, type: new () => E) => C4CODataResult<E>;
    static fromRequestResult: <T_1>(p: Promise<PlainODataResponse>, t: new () => T_1) => Promise<C4CODataResult<T_1>>;
}
export declare class C4CEntity {
    __metadata: {
        uri: string;
        type: string;
        etag?: string;
    };
    ObjectID: string;
    ETag: Edm.DateTime;
    ParentObjectID?: string;
    /**
     * parse instance from plain object
     * @param o
     */
    static fromPlainObject: <T>(o: any, t: new () => T) => T;
    static fromRequestResult: <T>(o: Promise<any>, t: new () => T) => Promise<T>;
}
export interface DeferredNavigationProperty {
    __deferred: {
        uri: string;
    };
}
declare global {
    module Edm {
        type String = string;
        type Guid = string;
        type DateTime = string;
        type DateTimeOffset = string;
        type Boolean = boolean;
        type Decimal = number;
        /**
         * base64 string
         */
        type Binary = string;
    }
}
