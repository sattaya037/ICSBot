import { HTTPMethod, Credential, PlainODataResponse } from "./types";
import { BatchRequest, ParsedResponse } from "./batch";
import { ODataFilter } from "./filter";
import { ODataQueryParam } from "./params";
export declare type AdvancedODataClientProxy = (url: string, init: RequestInit) => Promise<{
    /**
     * The Body Content
     */
    content: any;
    response: {
        headers?: Headers;
        status: number;
    };
}>;
export interface ODataNewOptions {
    /**
     * metadata url
     */
    metadataUri: string;
    /**
     * basic credential pair
     */
    credential?: Credential;
    /**
     * fetch proxy of all request
     */
    fetchProxy?: AdvancedODataClientProxy;
    /**
     * auto process csrf token of c4c
     */
    processCsrfToken?: boolean;
    /**
     * for SAP OData
     */
    forSAP?: boolean;
}
export interface BatchRequestOptions<T> {
    /**
     * Collection Name
     */
    collection: string;
    /**
     * OData Entity ObjectID
     */
    id?: any;
    /**
     * OData Param
     */
    params?: ODataQueryParam;
    method?: HTTPMethod;
    /**
     * OData Entity Object
     */
    entity?: T;
    /**
     * SAP OData need Content-Length but standard reject it
     */
    withContentLength?: boolean;
}
export interface ODataRequest<T> {
    collection: string; /** collection name */
    id?: any; /** object key in READ/UPDATE/DELETE */
    params?: ODataQueryParam; /** params in QUERY */
    /**
     * GET for QUERY/READ; for QUERY, you can use params to control response data
     * PATCH for UPDATE
     * POST for CREATE
     * DELETE for delete
     */
    method?: HTTPMethod;
    entity?: T; /** data object in CREATE/UPDATE */
}
/**
 * OData Client
 */
export declare class OData {
    private metadataUri;
    /**
     * odata service path, like /sap/c4c/odata/v1/c4codata/
     */
    private odataEnd;
    /**
     * http basic credential
     */
    private credential;
    /**
     * internal csrf token
     */
    private csrfToken;
    /**
     * dont direct use this object
     */
    private commonHeader;
    private fetchProxy;
    private processCsrfToken;
    private forSAP;
    /**
     * alternative constructor
     *
     * @param options config options
     */
    static New(options: ODataNewOptions): OData;
    /**
     * new odata query param
     */
    static newParam(): ODataQueryParam;
    /**
     * new filter
     */
    static newFilter(): ODataFilter;
    /**
     * OData
     */
    constructor(metadataUri: string, credential?: Credential, headers?: any, 
    /**
     * deprecated, not use now
     */
    urlRewrite?: (string: any) => string, fetchProxy?: AdvancedODataClientProxy, 
    /**
     * auto fetch csrf token before broken operation
     */
    processCsrfToken?: boolean);
    /**
     * generate dynamic header
     */
    private getHeaders;
    /**
     * Set OData Client Http Basic credential
     *
     * @param credential
     */
    setCredential(credential: Credential): void;
    /**
     * setODataEndPath
     *
     * e.g. https://tenant.c4c.saphybriscloud.cn/sap/c4c/odata/v1/c4codata/
     */
    setODataEndPath(odataEnd: string): void;
    /**
     * fetch CSRF Token
     */
    getCsrfToken(): Promise<string>;
    cleanCsrfToken(): void;
    /**
     * odata request uri
     *
     * @param uri HTTP URI
     * @param queryParams odata query params
     * @param method HTTP method
     * @param body request content
     */
    requestUri(uri: string, queryParams?: ODataQueryParam, method?: HTTPMethod, body?: any): Promise<PlainODataResponse>;
    /**
     * odata request
     *
     * @param collection CollectionName
     * @param id entity uuid or compound key
     * @param queryParams query param, not work for single entity uri
     * @param method request method
     * @param entity C4C Entity instance
     */
    request(collection: string, id?: any, queryParams?: ODataQueryParam, method?: HTTPMethod, entity?: any): Promise<PlainODataResponse>;
    /**
     * format id part of url
     *
     * @param id
     */
    private formatIdString;
    /**
     * new odata http request
     */
    newRequest<T>(options: ODataRequest<T>): Promise<PlainODataResponse>;
    /**
     * format batch request parameter
     */
    formatBatchRequests(requests: Array<Promise<BatchRequest>>): Promise<{
        url: string;
        req: RequestInit;
    }>;
    /**
     * execute batch requests and get response
     *
     * @param requests batch request
     */
    execBatchRequests(requests: Array<Promise<BatchRequest>>): Promise<Array<ParsedResponse<PlainODataResponse>>>;
    newBatchRequest<T>(options: BatchRequestOptions<T>): Promise<BatchRequest>;
}
