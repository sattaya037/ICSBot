"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var util_1 = require("./util");
var batch_1 = require("./batch");
var filter_1 = require("./filter");
var params_1 = require("./params");
var v4 = require("uuid/v4");
var odataDefaultFetchProxy = function (url, init) { return __awaiter(_this, void 0, void 0, function () {
    var res, content, contentType, jsonResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch(url, init)];
            case 1:
                res = _a.sent();
                content = "";
                if (res.status === 401) {
                    throw new Error("401, Unauthorized, check your creadential !");
                }
                if (res.status === 403) {
                    throw new Error("403, Forbidden, check your csrf token !");
                }
                if (res.status === 500) {
                    throw new Error("500, internal error");
                }
                contentType = res.headers.get("Content-Type");
                return [4 /*yield*/, res.text()];
            case 2:
                content = _a.sent();
                if (lodash_1.startsWith(contentType, "application/json")) { // result process
                    jsonResult = lodash_1.attempt(JSON.parse, content);
                    if (!(jsonResult instanceof Error)) {
                        content = jsonResult;
                        if (content.error) {
                            throw new Error(content.error.message.value);
                        }
                    }
                }
                return [2 /*return*/, {
                        content: content,
                        response: { headers: res.headers, status: res.status }
                    }];
        }
    });
}); };
/**
 * OData Client
 */
var OData = /** @class */ (function () {
    /**
     * OData
     */
    function OData(metadataUri, credential, headers, 
    /**
     * deprecated, not use now
     */
    urlRewrite, fetchProxy, 
    /**
     * auto fetch csrf token before broken operation
     */
    processCsrfToken) {
        if (headers === void 0) { headers = {}; }
        if (processCsrfToken === void 0) { processCsrfToken = true; }
        /**
         * internal csrf token
         */
        this.csrfToken = "";
        /**
         * dont direct use this object
         */
        this.commonHeader = {
            "Accept": "application/json",
            "Accept-Language": "zh",
            "Content-Type": "application/json"
        };
        this.fetchProxy = odataDefaultFetchProxy;
        this.processCsrfToken = true;
        this.forSAP = false;
        if (fetchProxy) {
            this.fetchProxy = fetchProxy;
        }
        if (!metadataUri) {
            throw new Error("metadata url required !");
        }
        else {
            this.metadataUri = metadataUri;
            // e.g https://c4c-system/sap/c4c/odata/v1/c4codata/
            this.odataEnd =
                lodash_1.join(lodash_1.slice(lodash_1.split(this.metadataUri, "/"), 0, -1), "/") + "/";
            if (credential) {
                this.credential = credential;
            }
        }
        this.commonHeader = __assign({}, this.commonHeader, headers);
        this.processCsrfToken = processCsrfToken;
    }
    /**
     * alternative constructor
     *
     * @param options config options
     */
    OData.New = function (options) {
        var rt = new OData(options.metadataUri, options.credential, undefined, undefined, options.fetchProxy, options.processCsrfToken);
        rt.forSAP = options.forSAP || false;
        return rt;
    };
    /**
     * new odata query param
     */
    OData.newParam = function () {
        return params_1.ODataParam.newParam();
    };
    /**
     * new filter
     */
    OData.newFilter = function () {
        return filter_1.ODataFilter.newFilter();
    };
    /**
     * generate dynamic header
     */
    OData.prototype.getHeaders = function () {
        return __awaiter(this, void 0, void 0, function () {
            var rt, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        rt = __assign({}, this.commonHeader);
                        if (this.credential) {
                            rt = __assign({}, rt, util_1.GetAuthorizationPair(this.credential.username, this.credential.password));
                        }
                        if (!this.processCsrfToken) return [3 /*break*/, 2];
                        _a = rt;
                        _b = "x-csrf-token";
                        return [4 /*yield*/, this.getCsrfToken()];
                    case 1:
                        _a[_b] = _c.sent();
                        _c.label = 2;
                    case 2: return [2 /*return*/, rt];
                }
            });
        });
    };
    /**
     * Set OData Client Http Basic credential
     *
     * @param credential
     */
    OData.prototype.setCredential = function (credential) {
        this.credential = credential;
    };
    /**
     * setODataEndPath
     *
     * e.g. https://tenant.c4c.saphybriscloud.cn/sap/c4c/odata/v1/c4codata/
     */
    OData.prototype.setODataEndPath = function (odataEnd) {
        if (odataEnd) {
            this.odataEnd = odataEnd;
        }
    };
    /**
     * fetch CSRF Token
     */
    OData.prototype.getCsrfToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var config, headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.csrfToken) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.csrfToken];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        config = {
                            method: "GET",
                            headers: { "x-csrf-token": "fetch" }
                        };
                        if (this.credential) {
                            config.headers = __assign({}, config.headers, util_1.GetAuthorizationPair(this.credential.username, this.credential.password));
                        }
                        return [4 /*yield*/, this.fetchProxy(this.odataEnd, config)];
                    case 3:
                        headers = (_a.sent()).response.headers;
                        if (headers) {
                            this.csrfToken = headers.get("x-csrf-token");
                        }
                        else {
                            throw new Error("csrf token need the odata proxy give out headers!");
                        }
                        return [2 /*return*/, this.csrfToken];
                }
            });
        });
    };
    OData.prototype.cleanCsrfToken = function () {
        if (this.csrfToken) {
            delete this.csrfToken;
        }
    };
    /**
     * odata request uri
     *
     * @param uri HTTP URI
     * @param queryParams odata query params
     * @param method HTTP method
     * @param body request content
     */
    OData.prototype.requestUri = function (uri, queryParams, method, body) {
        if (method === void 0) { method = "GET"; }
        return __awaiter(this, void 0, void 0, function () {
            var final_uri, config, _a, res, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        final_uri = uri;
                        _a = { method: method };
                        return [4 /*yield*/, this.getHeaders()];
                    case 1:
                        config = (_a.headers = _d.sent(), _a);
                        // format body
                        if (method !== "GET" && body) {
                            if (typeof body !== "string") {
                                config.body = JSON.stringify(body);
                            }
                            else {
                                config.body = body;
                            }
                        }
                        return [4 /*yield*/, this.fetchProxy(final_uri, config)];
                    case 2:
                        res = _d.sent();
                        if (!this.processCsrfToken) return [3 /*break*/, 5];
                        if (!res.response.headers) return [3 /*break*/, 5];
                        if (!(res.response.headers.get("x-csrf-token") === "Required")) return [3 /*break*/, 5];
                        this.cleanCsrfToken();
                        _b = config.headers;
                        _c = "x-csrf-token";
                        return [4 /*yield*/, this.getCsrfToken()];
                    case 3:
                        _b[_c] = _d.sent();
                        return [4 /*yield*/, this.fetchProxy(final_uri, config)];
                    case 4:
                        res = _d.sent();
                        _d.label = 5;
                    case 5: return [2 /*return*/, res.content];
                }
            });
        });
    };
    /**
     * odata request
     *
     * @param collection CollectionName
     * @param id entity uuid or compound key
     * @param queryParams query param, not work for single entity uri
     * @param method request method
     * @param entity C4C Entity instance
     */
    OData.prototype.request = function (collection, id, queryParams, method, entity) {
        if (method === void 0) { method = "GET"; }
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                url = "" + this.odataEnd + collection;
                if (id) {
                    url += this.formatIdString(id);
                }
                if (queryParams) {
                    url = url + "?" + queryParams.toString();
                }
                return [2 /*return*/, this.requestUri(url, queryParams, method, entity)];
            });
        });
    };
    /**
     * format id part of url
     *
     * @param id
     */
    OData.prototype.formatIdString = function (id) {
        var rt = "";
        switch (typeof id) {
            // for compound key like 
            // Alphabetical_list_of_products(CategoryName='Beverages',Discontinued=false,ProductID=1,ProductName='Chai')
            case "object":
                var compoundId = Object.entries(id).map(function (kv) {
                    var k = kv[0];
                    var v = kv[1];
                    switch (typeof v) {
                        case "string":
                            return k + "='" + v + "'";
                        case "number":
                            return k + "=" + v;
                        case "boolean":
                            return k + "=" + v;
                        default:
                            // other type will be removed
                            return "";
                    }
                }).filter(function (v) { return v; }).join(",");
                rt = "(" + compoundId + ")";
                break;
            case "number":
                rt = "(" + id + ")";
                break;
            case "string":
                rt = "('" + id + "')";
                break;
            case "undefined":
                break;
            default:
                throw new Error("Not supported ObjectID type " + typeof id + " for request");
        }
        return rt;
    };
    /**
     * new odata http request
     */
    OData.prototype.newRequest = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request(options.collection, options.id, options.params, options.method, options.entity)];
            });
        });
    };
    /**
     * format batch request parameter
     */
    OData.prototype.formatBatchRequests = function (requests) {
        return __awaiter(this, void 0, void 0, function () {
            var url, req, _a, r, requestBoundaryString;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = this.odataEnd + "$batch";
                        _a = {
                            method: "POST"
                        };
                        return [4 /*yield*/, this.getHeaders()];
                    case 1:
                        req = (_a.headers = _b.sent(),
                            _a);
                        return [4 /*yield*/, Promise.all(lodash_1.map(requests, function (aBatchR) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, aBatchR];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                    case 2:
                        r = _b.sent();
                        requestBoundaryString = v4();
                        req.headers["Content-Type"] = "multipart/mixed; boundary=" + requestBoundaryString;
                        req.body = batch_1.formatBatchRequest(r, requestBoundaryString);
                        return [2 /*return*/, { url: url, req: req }];
                }
            });
        });
    };
    /**
     * execute batch requests and get response
     *
     * @param requests batch request
     */
    OData.prototype.execBatchRequests = function (requests) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, url, req, _b, content, headers, responseBoundaryString;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.formatBatchRequests(requests)];
                    case 1:
                        _a = _c.sent(), url = _a.url, req = _a.req;
                        return [4 /*yield*/, this.fetchProxy(url, req)];
                    case 2:
                        _b = _c.sent(), content = _b.content, headers = _b.response.headers;
                        responseBoundaryString = headers.get("Content-Type").split("=").pop();
                        return [4 /*yield*/, batch_1.parseMultiPartContent(content, responseBoundaryString)];
                    case 3: return [2 /*return*/, _c.sent()];
                }
            });
        });
    };
    OData.prototype.newBatchRequest = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var collection, _a, method, id, _b, withContentLength, params, entity, url, headers, rt;
            return __generator(this, function (_c) {
                collection = options.collection, _a = options.method, method = _a === void 0 ? "GET" : _a, id = options.id, _b = options.withContentLength, withContentLength = _b === void 0 ? false : _b, params = options.params, entity = options.entity;
                if (this.forSAP) {
                    // for SAP NetWeaver Platform OData, need content length header
                    withContentLength = true;
                }
                url = collection;
                headers = lodash_1.clone(this.commonHeader);
                rt = { url: url, init: { method: method, headers: headers, body: "" } };
                if (id) {
                    url += this.formatIdString(id);
                }
                // READ OPERATION
                if (method === "GET" || method === "DELETE") {
                    delete headers["Content-Type"];
                    // other request don't need param
                    if (params) {
                        url = url + "?" + params.toString();
                    }
                }
                // WRITE OPERATION
                else {
                    switch (typeof entity) {
                        case "string":
                            rt.init.body = entity;
                            break;
                        case "object":
                            rt.init.body = JSON.stringify(entity);
                            break;
                        default:
                            break;
                    }
                    if (withContentLength) {
                        rt.init.headers["Content-Length"] = decodeURIComponent(rt.init.body.toString()).length;
                    }
                }
                rt.init.headers = headers;
                rt.url = url;
                return [2 /*return*/, rt];
            });
        });
    };
    return OData;
}());
exports.OData = OData;
