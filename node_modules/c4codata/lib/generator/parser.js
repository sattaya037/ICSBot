"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var xml2js_1 = require("xml2js");
var lodash_1 = require("lodash");
// need refactor data services collection
function getEntityTypesDefault(meta) {
    return meta["edmx:Edmx"]["edmx:DataServices"][0].Schema[0].EntityType;
}
exports.getEntityTypesDefault = getEntityTypesDefault;
// need refactor data services collection
function getEntityCollectionDefault(meta) {
    return meta["edmx:Edmx"]["edmx:DataServices"][0].Schema[0].EntityContainer[0].EntitySet;
}
exports.getEntityCollectionDefault = getEntityCollectionDefault;
function getEntityCollectionByEntityType(meta, entityType) {
    // ignore schema namespace
    return lodash_1.filter(getEntityCollectionDefault(meta), function (c) { return lodash_1.endsWith(c.$.EntityType, entityType.$.Name); });
}
exports.getEntityCollectionByEntityType = getEntityCollectionByEntityType;
function getEntityTypeByEntityCollection(meta, collection) {
    // ignore schema namespace
    return lodash_1.filter(getEntityTypesDefault(meta), function (t) { return lodash_1.endsWith(collection.$.EntityType, t.$.Name); });
}
exports.getEntityTypeByEntityCollection = getEntityTypeByEntityCollection;
exports.parseODataMetadataFromRemote = function (uri, headers, fetch) { return __awaiter(_this, void 0, void 0, function () {
    var res, body;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch(uri, { headers: headers, })];
            case 1:
                res = _a.sent();
                if (res.status != 200) {
                    throw new Error("Response not correct, check your network & credential\nStatus:" + res.status + "\nHeaders:" + JSON.stringify(res.headers));
                }
                return [4 /*yield*/, res.text()];
            case 2:
                body = _a.sent();
                if (lodash_1.isEmpty(body)) {
                    throw new Error(uri + " response empty metadata");
                }
                return [4 /*yield*/, parseODataMetadata(body)];
            case 3: return [2 /*return*/, _a.sent()];
        }
    });
}); };
/**
 * parse odata metadata xml
 *
 * @param metadataXmlString odata metadata xml string
 */
function parseODataMetadata(metadataXmlString) {
    return new Promise(function (resolve, reject) {
        if (lodash_1.isEmpty(metadataXmlString)) {
            reject("not get acceptable odata metadata xml");
        }
        else {
            xml2js_1.parseString(metadataXmlString, function (err, result) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(result);
                }
            });
        }
    });
}
exports.parseODataMetadata = parseODataMetadata;
function parseMetaClassFromOnlyClassDefault(metadata) {
    return parseMetaClassFromOnlyClass(metadata, getEntityTypesDefault(metadata));
}
exports.parseMetaClassFromOnlyClassDefault = parseMetaClassFromOnlyClassDefault;
function parseMetaClassFromDefault(metadata) {
    return parseMetaClassFrom(metadata, getEntityTypesDefault(metadata));
}
exports.parseMetaClassFromDefault = parseMetaClassFromDefault;
function parseSingleMetaClassFromOnlyClass(entity) {
    return {
        name: entity.$.Name,
        field: lodash_1.concat(entity.Property.map(function (p) { return ({
            name: p.$.Name,
            type: p.$.Type,
            description: p.$["sap:label"],
            originProperty: p
        }); }), entity.NavigationProperty ? entity.NavigationProperty.map(function (n) {
            return ({
                name: n.$.Name,
                type: "DeferredNavigationProperty|" + n.$.ToRole + "|" + n.$.ToRole + "[]",
                originProperty: n
            });
        }) : []),
        exported: true,
        extends: "C4CEntity",
        originEntity: entity
    };
}
exports.parseSingleMetaClassFromOnlyClass = parseSingleMetaClassFromOnlyClass;
function parseSingleMetaClassFromOnlyType(entity) {
    return {
        name: entity.$.Name + "Type",
        field: lodash_1.concat(entity.Property.map(function (p) { return ({
            name: p.$.Name,
            type: "string",
            value: "\"" + p.$.Name + "\"",
            description: p.$["sap:label"],
            static: true,
            originProperty: p
        }); }), entity.NavigationProperty ? entity.NavigationProperty.map(function (n) {
            return ({
                name: n.$.Name,
                type: n.$.ToRole,
                value: "\"" + n.$.Name + "\"",
                static: true,
                originProperty: n
            });
        }) : []),
        originEntity: entity,
        exported: true
    };
}
exports.parseSingleMetaClassFromOnlyType = parseSingleMetaClassFromOnlyType;
function parseMetaClassFromOnlyClass(meta, entityTypes) {
    return lodash_1.map(entityTypes, function (entity) { return parseSingleMetaClassFromOnlyClass(entity); });
}
exports.parseMetaClassFromOnlyClass = parseMetaClassFromOnlyClass;
function parseMetaClassFrom(meta, entityTypes) {
    return lodash_1.concat(lodash_1.map(entityTypes, function (entity) { return parseSingleMetaClassFromOnlyClass(entity); }), lodash_1.map(entityTypes, function (entity) { return parseSingleMetaClassFromOnlyType(entity); }));
}
exports.parseMetaClassFrom = parseMetaClassFrom;
function parseEntityCRUDFunctionsMap(metadata) {
    var collections = getEntityCollectionDefault(metadata);
    return lodash_1.reduce(collections, function (pre, c) {
        var _a;
        return lodash_1.assign(pre, (_a = {},
            _a[getEntityTypeByEntityCollection(metadata, c)[0].$.Name] = lodash_1.concat(pre[getEntityTypeByEntityCollection(metadata, c)[0].$.Name] || [], lodash_1.map(parseMetaCRUDFunctionFrom(c), function (f) { return f.name; })),
            _a));
    }, {});
}
exports.parseEntityCRUDFunctionsMap = parseEntityCRUDFunctionsMap;
function parseMetaCRUDFunctionFromDefault(metadata) {
    var collections = getEntityCollectionDefault(metadata);
    return lodash_1.reduce(collections, function (pre, c) { return lodash_1.concat(pre, parseMetaCRUDFunctionFrom(c)); }, []);
}
exports.parseMetaCRUDFunctionFromDefault = parseMetaCRUDFunctionFromDefault;
function parseMetaCRUDFunctionByEntityName(metadata, entityName) {
    var collections = getEntityCollectionDefault(metadata);
    var collection = lodash_1.filter(collections, function (c) { return c.$.EntityType.split(".").pop() === entityName; });
    if (collection.length > 0) {
        return lodash_1.concat(lodash_1.flatten(lodash_1.map(collection, function (c) { return parseMetaCRUDFunctionFrom(c); })));
    }
    else {
        return [];
    }
}
exports.parseMetaCRUDFunctionByEntityName = parseMetaCRUDFunctionByEntityName;
function parseMetaCRUDFunctionFrom(collection) {
    var rt = [];
    var entityName = collection.$.EntityType.split(".").pop();
    var name = collection.$.Name;
    rt.push({
        name: "read" + name,
        parameters: [{ name: "params", type: "ODataQueryParam" }],
        return: "Promise<C4CODataResult<" + entityName + ">>",
        body: "return C4CODataResult.fromRequestResult(odata.request(\"" + collection.$.Name + "\", undefined, params), " + entityName + ")",
        exported: true
    });
    rt.push({
        name: "bRead" + name,
        parameters: [{ name: "params", type: "ODataQueryParam" }],
        body: "return odata.newBatchRequest({ collection: \"" + collection.$.Name + "\", params, method: \"GET\" })",
        exported: true
    });
    rt.push({
        name: "readSingle" + name,
        parameters: [
            { name: "id", type: "string", description: "entity uuid" },
            { name: "params", type: "ODataQueryParam", description: "OData param" }
        ],
        return: "Promise<C4CODataSingleResult<" + entityName + ">>",
        body: "return C4CODataSingleResult.fromRequestResult(odata.request(\"" + collection.$.Name + "\", id, params), " + entityName + ")",
        exported: true
    });
    rt.push({
        name: "bReadSingle" + name,
        parameters: [
            { name: "id", type: "string", description: "entity uuid" },
            { name: "params", type: "ODataQueryParam", description: "OData param" }
        ],
        body: "return odata.newBatchRequest({ collection: \"" + collection.$.Name + "\", params, id, method: \"GET\" })",
        exported: true
    });
    if (collection.$["sap:creatable"] == "true") {
        rt.push({
            name: "create" + name,
            parameters: [
                { name: "entity", type: entityName }
            ],
            return: "Promise<C4CODataSingleResult<" + entityName + ">>",
            body: "return C4CODataSingleResult.fromRequestResult(odata.request(\"" + collection.$.Name + "\", undefined, undefined, \"POST\", entity), " + entityName + ")",
            exported: true
        });
        rt.push({
            name: "bCreate" + name,
            parameters: [
                { name: "entity", type: entityName }
            ],
            body: "return odata.newBatchRequest({ collection: \"" + collection.$.Name + "\", params, id, entity, method: \"POST\" })",
            exported: true
        });
    }
    if (collection.$["sap:updatable"] == "true") {
        rt.push({
            name: "update" + name,
            parameters: [
                { name: "id", type: "string", description: entityName + " UUID" },
                { name: "entity", type: entityName, description: "part of entity for updating" }
            ],
            return: "Promise<void>",
            body: "return odata.request(\"" + collection.$.Name + "\", id, undefined, \"PATCH\", entity)",
            exported: true
        });
        rt.push({
            name: "bUpdate" + name,
            parameters: [
                { name: "id", type: "string", description: entityName + " UUID" },
                { name: "entity", type: entityName, description: "part of entity for updating" }
            ],
            body: "return odata.newBatchRequest({ collection: \"" + collection.$.Name + "\", id, entity, method: \"PATCH\" })",
            exported: true
        });
        // rt.push({
        //   name: `replace${name}`,
        //   description: "replace a entity",
        //   parameters: [
        //     { name: "id", type: "string" },
        //     { name: "entity", type: entityName, description: "part of entity for updating" }
        //   ],
        //   return: `Promise<C4CODataSingleResult<${entityName}>>`,
        //   body: `return C4CODataSingleResult.fromRequestResult(odata.request("${collection.$.Name}", id, undefined, "PUT", entity), ${entityName})`,
        //   exported: true
        // })
    }
    if (collection.$["sap:deletable"] == "true") {
        rt.push({
            name: "deleteSingle" + name,
            parameters: [{ name: "id", type: "string" }],
            return: "Promise<void>",
            body: "return odata.request(\"" + collection.$.Name + "\", id, undefined ,\"DELETE\")",
            exported: true
        });
        rt.push({
            name: "bDeleteSingle" + name,
            parameters: [{ name: "id", type: "string" }],
            body: "return odata.newBatchRequest({ collection: \"" + collection.$.Name + "\", id, method: \"DELETE\" })",
            exported: true
        });
    }
    return rt;
}
exports.parseMetaCRUDFunctionFrom = parseMetaCRUDFunctionFrom;
