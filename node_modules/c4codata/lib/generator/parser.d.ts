import { ODataMetadata, ODataEntityType, ODataCollection } from "./meta_odata";
import { MetaClass, MetaFunction } from "./meta_js";
export declare function getEntityTypesDefault(meta: ODataMetadata): ODataEntityType[];
export declare function getEntityCollectionDefault(meta: ODataMetadata): ODataCollection[];
export declare function getEntityCollectionByEntityType(meta: ODataMetadata, entityType: ODataEntityType): ODataCollection[];
export declare function getEntityTypeByEntityCollection(meta: ODataMetadata, collection: ODataCollection): ODataEntityType[];
export declare const parseODataMetadataFromRemote: (uri: string, headers: any, fetch: any) => Promise<ODataMetadata>;
/**
 * parse odata metadata xml
 *
 * @param metadataXmlString odata metadata xml string
 */
export declare function parseODataMetadata(metadataXmlString: string): Promise<ODataMetadata>;
export declare function parseMetaClassFromOnlyClassDefault(metadata: ODataMetadata): MetaClass[];
export declare function parseMetaClassFromDefault(metadata: ODataMetadata): MetaClass[];
export declare function parseSingleMetaClassFromOnlyClass(entity: ODataEntityType): MetaClass;
export declare function parseSingleMetaClassFromOnlyType(entity: ODataEntityType): MetaClass;
export declare function parseMetaClassFromOnlyClass(meta: ODataMetadata, entityTypes: ODataEntityType[]): MetaClass[];
export declare function parseMetaClassFrom(meta: ODataMetadata, entityTypes: ODataEntityType[]): MetaClass[];
export declare function parseEntityCRUDFunctionsMap(metadata: ODataMetadata): {
    [entity: string]: string[];
};
export declare function parseMetaCRUDFunctionFromDefault(metadata: ODataMetadata): MetaFunction[];
export declare function parseMetaCRUDFunctionByEntityName(metadata: ODataMetadata, entityName: string): MetaFunction[];
export declare function parseMetaCRUDFunctionFrom(collection: ODataCollection): MetaFunction[];
